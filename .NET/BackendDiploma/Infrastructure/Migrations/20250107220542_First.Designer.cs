// <auto-generated />
using System;
using Infrastructure.DatabaseRelational;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyPlatformMsSqlDbContext))]
    [Migration("20250107220542_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("AddressId")
                        .HasName("Address_pk");

                    b.HasIndex("DivisionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId")
                        .HasName("Country_pk");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("DivisionId")
                        .HasName("Division_pk");

                    b.HasIndex("CountryId");

                    b.HasIndex("DivisionTypeId");

                    b.HasIndex("ParentDivisionId");

                    b.ToTable("Division", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.DivisionType", b =>
                {
                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DivisionTypeId")
                        .HasName("DivisionType_pk");

                    b.ToTable("DivisionType", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StreetId")
                        .HasName("Street_pk");

                    b.HasIndex("CountryId");

                    b.HasIndex("DivisionTypeId");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("DivisionStreet", b =>
                {
                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("DivisionId", "StreetId");

                    b.HasIndex("StreetId");

                    b.ToTable("DivisionStreet");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Address", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", "Division")
                        .WithMany("Addresses")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Address_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Address_Street");

                    b.Navigation("Division");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("Divisions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.DivisionType", "DivisionType")
                        .WithMany("Divisions")
                        .HasForeignKey("DivisionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("DivisionType_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", "ParentDivision")
                        .WithMany("ChildDivisions")
                        .HasForeignKey("ParentDivisionId")
                        .HasConstraintName("Division_Division");

                    b.Navigation("Country");

                    b.Navigation("DivisionType");

                    b.Navigation("ParentDivision");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("Streets")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_Street");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.DivisionType", "DivisionType")
                        .WithMany("Streets")
                        .HasForeignKey("DivisionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("DivisionType_Street");

                    b.Navigation("Country");

                    b.Navigation("DivisionType");
                });

            modelBuilder.Entity("DivisionStreet", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", null)
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DivisionStreet_DivisionId");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Street", null)
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DivisionStreet_StreetId");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Country", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ChildDivisions");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.DivisionType", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
