// <auto-generated />
using System;
using Infrastructure.DatabaseRelational;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyPlatformMsSqlDbContext))]
    [Migration("20250109084750_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId")
                        .HasName("Address_pk");

                    b.HasIndex("DivisionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId")
                        .HasName("Country_pk");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Polska"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DivisionId")
                        .HasName("Division_pk");

                    b.HasIndex("CountryId");

                    b.HasIndex("DivisionTypeId");

                    b.HasIndex("ParentDivisionId");

                    b.ToTable("Division", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.DivisionType", b =>
                {
                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DivisionTypeId")
                        .HasName("DivisionType_pk");

                    b.ToTable("DivisionType", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StreetId")
                        .HasName("Street_pk");

                    b.HasIndex("CountryId");

                    b.HasIndex("DivisionTypeId");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassification", b =>
                {
                    b.Property<int>("CompanyClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyClassificationId")
                        .HasName("CompanyClassification_pk");

                    b.HasIndex("CountryId");

                    b.ToTable("CompanyClassification", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassificationDetail", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyClassificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CompanyId", "CompanyClassificationId")
                        .HasName("CompanyClassificationDetail_pk");

                    b.HasIndex("CompanyClassificationId");

                    b.ToTable("CompanyClassificationDetail", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CompanyId")
                        .HasName("Company_pk");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.CompanyNameHistory", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CompanyId", "Date")
                        .HasName("CompanyNameHistory_pk");

                    b.ToTable("CompanyNameHistory", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifier", b =>
                {
                    b.Property<int>("CompanyIdentifierId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CompanyIdentifierId")
                        .HasName("CompanyIdentifier_pk");

                    b.HasIndex("CountryId");

                    b.ToTable("CompanyIdentifier", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyIdentifierId = 1,
                            CountryId = 1,
                            Name = "Numer identyfikacji podatkowej",
                            ShortName = "NIP"
                        },
                        new
                        {
                            CompanyIdentifierId = 2,
                            CountryId = 1,
                            Name = "Krajowy Rejestr Urzędowy Podmiotów Gospodarki Narodowej",
                            ShortName = "REGON"
                        },
                        new
                        {
                            CompanyIdentifierId = 3,
                            CountryId = 1,
                            Name = "Krajowy Rejestr Sądowy",
                            ShortName = "KRS"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifierDetail", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompanyIdentifierId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyId", "CompanyIdentifierId")
                        .HasName("CompanyIdentifierDetail_pk");

                    b.HasIndex("CompanyIdentifierId");

                    b.ToTable("CompanyIdentifierDetail", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Statuses.CompanyStatus", b =>
                {
                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyStatusId")
                        .HasName("CompanyStatus_pk");

                    b.ToTable("CompanyStatus", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyStatusId = 1,
                            Name = "Działająca"
                        },
                        new
                        {
                            CompanyStatusId = 4,
                            Name = "Przekształcona"
                        },
                        new
                        {
                            CompanyStatusId = 2,
                            Name = "W likwidacji"
                        },
                        new
                        {
                            CompanyStatusId = 8,
                            Name = "Wykreślona z wykazu"
                        },
                        new
                        {
                            CompanyStatusId = 3,
                            Name = "Zlikwidowana"
                        },
                        new
                        {
                            CompanyStatusId = 11,
                            Name = "Zawieszona"
                        },
                        new
                        {
                            CompanyStatusId = 12,
                            Name = "Wznowiona"
                        },
                        new
                        {
                            CompanyStatusId = 13,
                            Name = "Zakończona"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Statuses.CompanyStatusHistory", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "Date", "CompanyStatusId")
                        .HasName("CompanyStatusHistory_pk");

                    b.HasIndex("CompanyStatusId");

                    b.ToTable("CompanyStatusHistory", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.AIOrganizationalUnit", b =>
                {
                    b.Property<Guid>("AcademicInstitutionOrganizationalUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("AcademicInstitutionOrganizationalUnitId")
                        .HasName("AIOrganizationalUnit_pk");

                    b.ToTable("AIOrganizationalUnit", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CourseFormCode")
                        .HasColumnType("int");

                    b.Property<int?>("CourseLevelCode")
                        .HasColumnType("int");

                    b.Property<int?>("CourseProfileCode")
                        .HasColumnType("int");

                    b.Property<int?>("CourseTitleCode")
                        .HasColumnType("int");

                    b.Property<string>("IscedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LiquidationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("NumberOfSemesters")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CourseId")
                        .HasName("Course_pk");

                    b.HasIndex("CourseFormCode");

                    b.HasIndex("CourseLevelCode");

                    b.HasIndex("CourseProfileCode");

                    b.HasIndex("CourseTitleCode");

                    b.HasIndex("IscedCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseForm", b =>
                {
                    b.Property<int>("CourseFormCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseFormCode")
                        .HasName("CourseForm_pk");

                    b.ToTable("CourseForm", (string)null);

                    b.HasData(
                        new
                        {
                            CourseFormCode = 1,
                            Name = "stacjonarne"
                        },
                        new
                        {
                            CourseFormCode = 2,
                            Name = "niestacjonarne"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseLevel", b =>
                {
                    b.Property<int>("CourseLevelCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseLevelCode")
                        .HasName("CourseLevel_pk");

                    b.ToTable("CourseLevel", (string)null);

                    b.HasData(
                        new
                        {
                            CourseLevelCode = 1,
                            Name = "jednolite magisterskie"
                        },
                        new
                        {
                            CourseLevelCode = 2,
                            Name = "pierwszego stopnia"
                        },
                        new
                        {
                            CourseLevelCode = 3,
                            Name = "drugiego stopnia"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseProfile", b =>
                {
                    b.Property<int>("CourseProfileCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseProfileCode")
                        .HasName("CourseProfile_pk");

                    b.ToTable("CourseProfile", (string)null);

                    b.HasData(
                        new
                        {
                            CourseProfileCode = 1,
                            Name = "praktyczny"
                        },
                        new
                        {
                            CourseProfileCode = 2,
                            Name = "ogólnoakademicki"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseTitle", b =>
                {
                    b.Property<int>("CourseTitleCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseTitleCode")
                        .HasName("CourseTitle_pk");

                    b.ToTable("CourseTitle", (string)null);

                    b.HasData(
                        new
                        {
                            CourseTitleCode = 1,
                            Name = "magister"
                        },
                        new
                        {
                            CourseTitleCode = 2,
                            Name = "licencjat"
                        },
                        new
                        {
                            CourseTitleCode = 3,
                            Name = "inżynier"
                        },
                        new
                        {
                            CourseTitleCode = 4,
                            Name = "magister inżynier"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Disciplines.CourseDiscipline", b =>
                {
                    b.Property<string>("DisciplineCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DisciplineLeading")
                        .HasColumnType("bit");

                    b.Property<int?>("PercentageShare")
                        .HasColumnType("int");

                    b.HasKey("DisciplineCode", "CourseId")
                        .HasName("CourseDiscipline_pk");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDiscipline", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Disciplines.Discipline", b =>
                {
                    b.Property<string>("DisciplineCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DisciplineCode")
                        .HasName("Discipline_pk");

                    b.ToTable("Discipline", (string)null);

                    b.HasData(
                        new
                        {
                            DisciplineCode = "DS010101N",
                            Name = "archeologia"
                        },
                        new
                        {
                            DisciplineCode = "DS010201N",
                            Name = "architektura i urbanistyka"
                        },
                        new
                        {
                            DisciplineCode = "DS010607N",
                            Name = "astronomia"
                        },
                        new
                        {
                            DisciplineCode = "DS010213N",
                            Name = "automatyka, elektronika, elektrotechnika i technologie kosmiczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010305N",
                            Name = "biologia medyczna"
                        },
                        new
                        {
                            DisciplineCode = "DS010608N",
                            Name = "biotechnologia"
                        },
                        new
                        {
                            DisciplineCode = "DS010501N",
                            Name = "ekonomia i finanse"
                        },
                        new
                        {
                            DisciplineCode = "DS010108N",
                            Name = "etnologia i antropologia kulturowa"
                        },
                        new
                        {
                            DisciplineCode = "DS010102N",
                            Name = "filozofia"
                        },
                        new
                        {
                            DisciplineCode = "DS010502N",
                            Name = "geografia społeczno-ekonomiczna i gospodarka przestrzenna"
                        },
                        new
                        {
                            DisciplineCode = "DS010103N",
                            Name = "historia"
                        },
                        new
                        {
                            DisciplineCode = "DS010601N",
                            Name = "informatyka"
                        },
                        new
                        {
                            DisciplineCode = "DS010204N",
                            Name = "informatyka techniczna i telekomunikacja"
                        },
                        new
                        {
                            DisciplineCode = "DS010210N",
                            Name = "inżynieria bezpieczeństwa"
                        },
                        new
                        {
                            DisciplineCode = "DS010202N",
                            Name = "inżynieria biomedyczna"
                        },
                        new
                        {
                            DisciplineCode = "DS010205N",
                            Name = "inżynieria chemiczna"
                        },
                        new
                        {
                            DisciplineCode = "DS010212N",
                            Name = "inżynieria lądowa, geodezja i transport"
                        },
                        new
                        {
                            DisciplineCode = "DS010207N",
                            Name = "inżynieria materiałowa"
                        },
                        new
                        {
                            DisciplineCode = "DS010208N",
                            Name = "inżynieria mechaniczna"
                        },
                        new
                        {
                            DisciplineCode = "DS010209N",
                            Name = "inżynieria środowiska, górnictwo i energetyka"
                        },
                        new
                        {
                            DisciplineCode = "DS010104N",
                            Name = "językoznawstwo"
                        },
                        new
                        {
                            DisciplineCode = "DS010105N",
                            Name = "literaturoznawstwo"
                        },
                        new
                        {
                            DisciplineCode = "DS010602N",
                            Name = "matematyka"
                        },
                        new
                        {
                            DisciplineCode = "DS010702N",
                            Name = "nauki biblijne"
                        },
                        new
                        {
                            DisciplineCode = "DS010603N",
                            Name = "nauki biologiczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010604N",
                            Name = "nauki chemiczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010301N",
                            Name = "nauki farmaceutyczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010605N",
                            Name = "nauki fizyczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010405N",
                            Name = "nauki leśne"
                        },
                        new
                        {
                            DisciplineCode = "DS010304N",
                            Name = "nauki medyczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010503N",
                            Name = "nauki o bezpieczeństwie"
                        },
                        new
                        {
                            DisciplineCode = "DS010504N",
                            Name = "nauki o komunikacji społecznej i mediach"
                        },
                        new
                        {
                            DisciplineCode = "DS010302N",
                            Name = "nauki o kulturze fizycznej"
                        },
                        new
                        {
                            DisciplineCode = "DS010106N",
                            Name = "nauki o kulturze i religii"
                        },
                        new
                        {
                            DisciplineCode = "DS010505N",
                            Name = "nauki o polityce i administracji"
                        },
                        new
                        {
                            DisciplineCode = "DS010901N",
                            Name = "nauki o rodzinie"
                        },
                        new
                        {
                            DisciplineCode = "DS010107N",
                            Name = "nauki o sztuce"
                        },
                        new
                        {
                            DisciplineCode = "DS010506N",
                            Name = "nauki o zarządzaniu i jakości"
                        },
                        new
                        {
                            DisciplineCode = "DS010303N",
                            Name = "nauki o zdrowiu"
                        },
                        new
                        {
                            DisciplineCode = "DS010606N",
                            Name = "nauki o Ziemi i środowisku"
                        },
                        new
                        {
                            DisciplineCode = "DS010507N",
                            Name = "nauki prawne"
                        },
                        new
                        {
                            DisciplineCode = "DS010508N",
                            Name = "nauki socjologiczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010701N",
                            Name = "nauki teologiczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010211N",
                            Name = "ochrona dziedzictwa i konserwacja zabytków"
                        },
                        new
                        {
                            DisciplineCode = "DS010509N",
                            Name = "pedagogika"
                        },
                        new
                        {
                            DisciplineCode = "DS010109N",
                            Name = "polonistyka"
                        },
                        new
                        {
                            DisciplineCode = "DS010510N",
                            Name = "prawo kanoniczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010511N",
                            Name = "psychologia"
                        },
                        new
                        {
                            DisciplineCode = "DS010401N",
                            Name = "rolnictwo i ogrodnictwo"
                        },
                        new
                        {
                            DisciplineCode = "DS010512N",
                            Name = "stosunki międzynarodowe"
                        },
                        new
                        {
                            DisciplineCode = "DS010801N",
                            Name = "sztuki filmowe i teatralne"
                        },
                        new
                        {
                            DisciplineCode = "DS010802N",
                            Name = "sztuki muzyczne"
                        },
                        new
                        {
                            DisciplineCode = "DS010803N",
                            Name = "sztuki plastyczne i konserwacja dzieł sztuki"
                        },
                        new
                        {
                            DisciplineCode = "DS010402N",
                            Name = "technologia żywności i żywienia"
                        },
                        new
                        {
                            DisciplineCode = "DS011001N",
                            Name = "weterynaria"
                        },
                        new
                        {
                            DisciplineCode = "DS010404N",
                            Name = "zootechnika i rybactwo"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Isced", b =>
                {
                    b.Property<string>("IscedCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IscedCode")
                        .HasName("Isced_pk");

                    b.ToTable("Isced", (string)null);

                    b.HasData(
                        new
                        {
                            IscedCode = "00",
                            Name = "Grupa Programy ogólne"
                        },
                        new
                        {
                            IscedCode = "000",
                            Name = "Podgrupa programów i kwalifikacji ogólnych nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0000",
                            Name = "Programy i kwalifikacje ogólne nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "001",
                            Name = "Podgrupa programów i kwalifikacji podstawowych"
                        },
                        new
                        {
                            IscedCode = "0011",
                            Name = "Podstawowe programy i kwalifikacje"
                        },
                        new
                        {
                            IscedCode = "002",
                            Name = "Podgrupa umiejętności czytania, pisania i liczenia"
                        },
                        new
                        {
                            IscedCode = "0021",
                            Name = "Umiejętność czytania, pisania i liczenia"
                        },
                        new
                        {
                            IscedCode = "003",
                            Name = "Podgrupa rozwoju umiejętności osobowościowych"
                        },
                        new
                        {
                            IscedCode = "0031",
                            Name = "Rozwój umiejętności osobowościowych"
                        },
                        new
                        {
                            IscedCode = "009",
                            Name = "Podgrupa programów i kwalifikacji ogólnych gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0099",
                            Name = "Programy i kwalifikacje ogólne, gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "01",
                            Name = "Grupa Kształcenie"
                        },
                        new
                        {
                            IscedCode = "011",
                            Name = "Podgrupa pedagogiczna"
                        },
                        new
                        {
                            IscedCode = "0110",
                            Name = "Kształcenie nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0111",
                            Name = "Kształcenie"
                        },
                        new
                        {
                            IscedCode = "0112",
                            Name = "Kształcenie nauczycieli nauczania przedszkolnego"
                        },
                        new
                        {
                            IscedCode = "0113",
                            Name = "Kształcenie nauczycieli bez specjalizacji tematycznej"
                        },
                        new
                        {
                            IscedCode = "0114",
                            Name = "Kształcenie nauczycieli ze specjalizacją tematyczną"
                        },
                        new
                        {
                            IscedCode = "0119",
                            Name = "Kształcenie gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "018",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji związanych z edukacją"
                        },
                        new
                        {
                            IscedCode = "0188",
                            Name = "Interdyscyplinarne programy i kwalifikacje związane z edukacją"
                        },
                        new
                        {
                            IscedCode = "02",
                            Name = "Grupa Nauki humanistyczne i sztuka"
                        },
                        new
                        {
                            IscedCode = "020",
                            Name = "Podgrupa programów i kwalifikacji związanych ze sztuką i przedmiotami humanistycznymi nieokreślonymi dalej"
                        },
                        new
                        {
                            IscedCode = "0200",
                            Name = "Programy i kwalifikacje związane ze sztuką i przedmiotami humanistycznymi nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "021",
                            Name = "Podgrupa artystyczna"
                        },
                        new
                        {
                            IscedCode = "0210",
                            Name = "Programy i kwalifikacje związane ze sztuką nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0211",
                            Name = "Techniki audiowizualne i produkcja mediów"
                        },
                        new
                        {
                            IscedCode = "0212",
                            Name = "Moda, wystrój wnętrz i projektowanie przemysłowe"
                        },
                        new
                        {
                            IscedCode = "0213",
                            Name = "Sztuki plastyczne"
                        },
                        new
                        {
                            IscedCode = "0214",
                            Name = "Rękodzieło"
                        },
                        new
                        {
                            IscedCode = "0215",
                            Name = "Muzyka i sztuki sceniczne"
                        },
                        new
                        {
                            IscedCode = "0219",
                            Name = "Programy i kwalifikacje związane ze sztuką gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "022",
                            Name = "Podgrupa humanistyczna (z wyłączeniem języków)"
                        },
                        new
                        {
                            IscedCode = "0220",
                            Name = "Przedmioty humanistyczne (z wyłączeniem języków) nie określone dalej"
                        },
                        new
                        {
                            IscedCode = "0221",
                            Name = "Religia i teologia"
                        },
                        new
                        {
                            IscedCode = "0222",
                            Name = "Historia i archeologia"
                        },
                        new
                        {
                            IscedCode = "0223",
                            Name = "Filozofia i etyka"
                        },
                        new
                        {
                            IscedCode = "0229",
                            Name = "Przedmioty humanistyczne (z wyłączeniem języków) gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "023",
                            Name = "Podgrupa językowa"
                        },
                        new
                        {
                            IscedCode = "0230",
                            Name = "Języki nie określone dalej"
                        },
                        new
                        {
                            IscedCode = "0231",
                            Name = "Nauka języków"
                        },
                        new
                        {
                            IscedCode = "0232",
                            Name = "Literatura i językoznawstwo (lingwistyka)"
                        },
                        new
                        {
                            IscedCode = "0239",
                            Name = "Programy i kwalifikacje związane z językami gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "028",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji związanych ze sztuką i przedmiotami humanistycznymi"
                        },
                        new
                        {
                            IscedCode = "0288",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące sztuki i przedmioty humanistyczne"
                        },
                        new
                        {
                            IscedCode = "029",
                            Name = "Podgrupa programów i kwalifikacji związanych ze sztuką i przedmiotami humanistycznymi gdzie indziej niesklasyfikowanymi"
                        },
                        new
                        {
                            IscedCode = "0299",
                            Name = "Programy i kwalifikacje związane ze sztuką i przedmiotami humanistycznymi gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "03",
                            Name = "Grupa Nauki społeczne, dziennikarstwo i informacja"
                        },
                        new
                        {
                            IscedCode = "030",
                            Name = "Podgrupa nauk społecznych, dziennikarstwa i informacji nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0300",
                            Name = "Nauki społeczne, dziennikarstwo i informacja nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "031",
                            Name = "Podgrupa społeczna"
                        },
                        new
                        {
                            IscedCode = "0310",
                            Name = "Nauki społeczne nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0311",
                            Name = "Ekonomia"
                        },
                        new
                        {
                            IscedCode = "0312",
                            Name = "Politologia i wiedza o społeczeństwie"
                        },
                        new
                        {
                            IscedCode = "0313",
                            Name = "Psychologia"
                        },
                        new
                        {
                            IscedCode = "0314",
                            Name = "Socjologia i kulturoznawstwo"
                        },
                        new
                        {
                            IscedCode = "0319",
                            Name = "Programy i kwalifikacje związane z naukami społecznymi, gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "032",
                            Name = "Podgrupa dziennikarstwa i informacji"
                        },
                        new
                        {
                            IscedCode = "0320",
                            Name = "Dziennikarstwo i informacja naukowa nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0321",
                            Name = "Dziennikarstwo"
                        },
                        new
                        {
                            IscedCode = "0322",
                            Name = "Bibliotekoznawstwo, informacja naukowa i archiwistyka"
                        },
                        new
                        {
                            IscedCode = "0329",
                            Name = "Dziennikarstwo i informacja naukowa gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "038",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji związanych z naukami społecznymi, dziennikarstwem i informacją"
                        },
                        new
                        {
                            IscedCode = "0388",
                            Name = "Interdyscyplinarne programy i kwalifikacje związane z naukami społecznymi, dziennikarstwem i informacją"
                        },
                        new
                        {
                            IscedCode = "039",
                            Name = "Podgrupa nauk społecznych, dziennikarstwa i informacji gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0399",
                            Name = "Nauki społeczne, dziennikarstwo i informacja gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "04",
                            Name = "Grupa Biznes, administracja i prawo"
                        },
                        new
                        {
                            IscedCode = "040",
                            Name = "Podgrupa biznesu, administracji i prawa nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0400",
                            Name = "Biznes, administracja i prawo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "041",
                            Name = "Podgrupa biznesu i administracji"
                        },
                        new
                        {
                            IscedCode = "0410",
                            Name = "Biznes i administracja nie określone dalej"
                        },
                        new
                        {
                            IscedCode = "0411",
                            Name = "Rachunkowość i podatki"
                        },
                        new
                        {
                            IscedCode = "0412",
                            Name = "Finanse, bankowość i ubezpieczenia"
                        },
                        new
                        {
                            IscedCode = "0413",
                            Name = "Zarządzanie i administracja"
                        },
                        new
                        {
                            IscedCode = "0414",
                            Name = "Marketing i reklama"
                        },
                        new
                        {
                            IscedCode = "0415",
                            Name = "Prace sekretarskie i biurowe"
                        },
                        new
                        {
                            IscedCode = "0416",
                            Name = "Sprzedaż hurtowa i detaliczna"
                        },
                        new
                        {
                            IscedCode = "0417",
                            Name = "Umiejętności związane z miejscem pracy"
                        },
                        new
                        {
                            IscedCode = "0419",
                            Name = "Programy i kwalifikacje związane z prowadzeniem działalności gospodarczej i administracją gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "042",
                            Name = "Podgrupa prawna"
                        },
                        new
                        {
                            IscedCode = "0421",
                            Name = "Prawo"
                        },
                        new
                        {
                            IscedCode = "048",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji związanych z prowadzeniem działalności gospodarczej, administracją i prawem"
                        },
                        new
                        {
                            IscedCode = "0488",
                            Name = "Interdyscyplinarne programy i kwalifikacje związane z prowadzeniem działalności gospodarczej, administracją i prawem"
                        },
                        new
                        {
                            IscedCode = "049",
                            Name = "Podgrupa programów i kwalifikacji związanych z prowadzeniem działalności gospodarczej, administracją i prawem gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0499",
                            Name = "Programy i kwalifikacje obejmujące prowadzenie działalności gospodarczej, administrację i prawo gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "05",
                            Name = "Grupa Nauki przyrodnicze, matematyka i statystyka"
                        },
                        new
                        {
                            IscedCode = "050",
                            Name = "Podgrupa nauk przyrodniczych, matematyki i statystyki nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0500",
                            Name = "Nauki przyrodnicze, matematyka i statystyka nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "051",
                            Name = "Podgrupa biologiczna"
                        },
                        new
                        {
                            IscedCode = "0510",
                            Name = "Nauki biologiczne i powiązane nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0511",
                            Name = "Biologia"
                        },
                        new
                        {
                            IscedCode = "0512",
                            Name = "Biochemia"
                        },
                        new
                        {
                            IscedCode = "0519",
                            Name = "Programy i kwalifikacje związane z biologią i naukami pokrewnymi gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "052",
                            Name = "Podgrupa nauk o środowisku"
                        },
                        new
                        {
                            IscedCode = "0520",
                            Name = "Nauki o środowisku nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0521",
                            Name = "Ekologia i ochrona środowiska"
                        },
                        new
                        {
                            IscedCode = "0522",
                            Name = "Środowisko naturalne i przyroda"
                        },
                        new
                        {
                            IscedCode = "0529",
                            Name = "Programy i kwalifikacje związane ze środowiskiem gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "053",
                            Name = "Podgrupa fizyczna"
                        },
                        new
                        {
                            IscedCode = "0530",
                            Name = "Nauki fizyczne nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0531",
                            Name = "Chemia"
                        },
                        new
                        {
                            IscedCode = "0532",
                            Name = "Nauki o Ziemi"
                        },
                        new
                        {
                            IscedCode = "0533",
                            Name = "Fizyka"
                        },
                        new
                        {
                            IscedCode = "0539",
                            Name = "Programy i kwalifikacje związane z naukami fizycznymi gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "054",
                            Name = "Podgrupa matematyczna i statystyczna"
                        },
                        new
                        {
                            IscedCode = "0540",
                            Name = "Matematyka i statystyka nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0541",
                            Name = "Matematyka"
                        },
                        new
                        {
                            IscedCode = "0542",
                            Name = "Statystyka"
                        },
                        new
                        {
                            IscedCode = "058",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących nauki przyrodnicze, matematykę i statystykę"
                        },
                        new
                        {
                            IscedCode = "0588",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące nauki przyrodnicze, matematykę i statystykę"
                        },
                        new
                        {
                            IscedCode = "059",
                            Name = "Podgrupa nauk przyrodniczych, matematyki i statystyki gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0599",
                            Name = "Nauki przyrodnicze, matematyka i statystyka gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "06",
                            Name = "Grupa Technologie teleinformacyjne"
                        },
                        new
                        {
                            IscedCode = "061",
                            Name = "Podgrupa technologii teleinformacyjnych"
                        },
                        new
                        {
                            IscedCode = "0610",
                            Name = "Technologie teleinformacyjne nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0611",
                            Name = "Obsługa i użytkowanie komputerów"
                        },
                        new
                        {
                            IscedCode = "0612",
                            Name = "Projektowanie i administrowanie baz danych i sieci"
                        },
                        new
                        {
                            IscedCode = "0613",
                            Name = "Tworzenie i analiza oprogramowania i aplikacji"
                        },
                        new
                        {
                            IscedCode = "0619",
                            Name = "Technologie teleinformacyjne gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "068",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących technologie informacyjno-komunikacyjne"
                        },
                        new
                        {
                            IscedCode = "0688",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące technologie informacyjno-komunikacyjne"
                        },
                        new
                        {
                            IscedCode = "07",
                            Name = "Grupa Technika, przemysł, budownictwo"
                        },
                        new
                        {
                            IscedCode = "070",
                            Name = "Podgrupa techniki, przemysłu i budownictwa nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0700",
                            Name = "Technika, przemysł i budownictwo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "071",
                            Name = "Podgrupa inżynieryjno-techniczna"
                        },
                        new
                        {
                            IscedCode = "0710",
                            Name = "Inżynieria i zawody inżynieryjne nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0711",
                            Name = "Inżynieria chemiczna i procesowa"
                        },
                        new
                        {
                            IscedCode = "0712",
                            Name = "Technologie związane z ochroną środowiska"
                        },
                        new
                        {
                            IscedCode = "0713",
                            Name = "Elektryczność i energia"
                        },
                        new
                        {
                            IscedCode = "0714",
                            Name = "Elektronika i automatyka"
                        },
                        new
                        {
                            IscedCode = "0715",
                            Name = "Mechanika i metalurgia"
                        },
                        new
                        {
                            IscedCode = "0716",
                            Name = "Pojazdy samochodowe, statki i samoloty"
                        },
                        new
                        {
                            IscedCode = "0719",
                            Name = "Inżynieria i zawody inżynierskie gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "072",
                            Name = "Podgrupa produkcji i przetwórstwa"
                        },
                        new
                        {
                            IscedCode = "0720",
                            Name = "Produkcja i przetwórstwo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0721",
                            Name = "Przetwórstwo żywności"
                        },
                        new
                        {
                            IscedCode = "0722",
                            Name = "Surowce (szkło, papier, tworzywo sztuczne i drewno)"
                        },
                        new
                        {
                            IscedCode = "0723",
                            Name = "Tekstylia (odzież, obuwie i wyroby skórzane)"
                        },
                        new
                        {
                            IscedCode = "0724",
                            Name = "Górnictwo i wydobycie"
                        },
                        new
                        {
                            IscedCode = "0729",
                            Name = "Programy i kwalifikacje związane z przetwórstwem przemysłowym gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "073",
                            Name = "Podgrupa architektury i budownictwa"
                        },
                        new
                        {
                            IscedCode = "0730",
                            Name = "Architektura i budownictwo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0731",
                            Name = "Architektura i planowanie przestrzenne"
                        },
                        new
                        {
                            IscedCode = "0732",
                            Name = "Budownictwo i inżynieria lądowa i wodna"
                        },
                        new
                        {
                            IscedCode = "078",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących technikę, przemysł i budownictwo"
                        },
                        new
                        {
                            IscedCode = "0788",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące technikę, przemysł i budownictwo"
                        },
                        new
                        {
                            IscedCode = "079",
                            Name = "Podgrupa techniki, przemysłu i budownictwa gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0799",
                            Name = "Technika, przemysł i budownictwo gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "08",
                            Name = "Grupa Rolnictwo"
                        },
                        new
                        {
                            IscedCode = "080",
                            Name = "Rolnictwo, leśnictwo, rybołówstwo i weterynaria nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0800",
                            Name = "Rolnictwo, leśnictwo, rybołówstwo i weterynaria nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "081",
                            Name = "Podgrupa rolnicza"
                        },
                        new
                        {
                            IscedCode = "0810",
                            Name = "Rolnictwo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0811",
                            Name = "Produkcja roślinna i zwierzęca"
                        },
                        new
                        {
                            IscedCode = "0812",
                            Name = "Ogrodnictwo"
                        },
                        new
                        {
                            IscedCode = "0819",
                            Name = "Programy i kwalifikacje związane z rolnictwem gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "082",
                            Name = "Podgrupa leśna"
                        },
                        new
                        {
                            IscedCode = "0821",
                            Name = "Leśnictwo"
                        },
                        new
                        {
                            IscedCode = "083",
                            Name = "Podgrupa rybactwa"
                        },
                        new
                        {
                            IscedCode = "0831",
                            Name = "Rybactwo"
                        },
                        new
                        {
                            IscedCode = "084",
                            Name = "Podgrupa weterynaryjna"
                        },
                        new
                        {
                            IscedCode = "0841",
                            Name = "Weterynaria"
                        },
                        new
                        {
                            IscedCode = "088",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących rolnictwo, leśnictwo, rybactwo i weterynarię"
                        },
                        new
                        {
                            IscedCode = "0888",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące rolnictwo, leśnictwo, rybactwo i weterynarię"
                        },
                        new
                        {
                            IscedCode = "089",
                            Name = "Podgrupa rolnictwa, leśnictwa, rybactwa i weterynaria gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "0899",
                            Name = "Rolnictwo, leśnictwo, rybactwo i weterynaria gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "09",
                            Name = "Grupa Zdrowie i opieka społeczna"
                        },
                        new
                        {
                            IscedCode = "090",
                            Name = "Podgrupa zdrowia i opieki społecznej nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "0900",
                            Name = "Zdrowie i opieka społeczna nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "091",
                            Name = "Podgrupa medyczna"
                        },
                        new
                        {
                            IscedCode = "0910",
                            Name = "Zdrowie nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "0911",
                            Name = "Stomatologia"
                        },
                        new
                        {
                            IscedCode = "0912",
                            Name = "Medycyna"
                        },
                        new
                        {
                            IscedCode = "0913",
                            Name = "Pielęgniarstwo i położnictwo"
                        },
                        new
                        {
                            IscedCode = "0914",
                            Name = "Technologie związane z diagnostyką i leczeniem"
                        },
                        new
                        {
                            IscedCode = "0915",
                            Name = "Terapia i rehabilitacja"
                        },
                        new
                        {
                            IscedCode = "0916",
                            Name = "Farmacja"
                        },
                        new
                        {
                            IscedCode = "0917",
                            Name = "Medycyna i terapia tradycyjna oraz komplementarna"
                        },
                        new
                        {
                            IscedCode = "0919",
                            Name = "Zdrowie gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "092",
                            Name = "Podgrupa opieki społecznej"
                        },
                        new
                        {
                            IscedCode = "0920",
                            Name = "Opieka społeczna nieokreślona dalej"
                        },
                        new
                        {
                            IscedCode = "0921",
                            Name = "Opieka nad osobami starszymi i dorosłymi niepełnosprawnymi"
                        },
                        new
                        {
                            IscedCode = "0922",
                            Name = "Usługi związane z opieką nad dziećmi i młodzieżą"
                        },
                        new
                        {
                            IscedCode = "0923",
                            Name = "Praca socjalna i doradztwo"
                        },
                        new
                        {
                            IscedCode = "0929",
                            Name = "Opieka społeczna gdzie indziej niesklasyfikowana"
                        },
                        new
                        {
                            IscedCode = "098",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących zdrowie i opiekę społeczną"
                        },
                        new
                        {
                            IscedCode = "0988",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące zdrowie i opiekę społeczną"
                        },
                        new
                        {
                            IscedCode = "099",
                            Name = "Podgrupa zdrowie i opieka społeczna gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "0999",
                            Name = "Zdrowie i opieka społeczna gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "10",
                            Name = "Grupa Usługi"
                        },
                        new
                        {
                            IscedCode = "100",
                            Name = "Podgrupa usług nieokreślonych dalej"
                        },
                        new
                        {
                            IscedCode = "1000",
                            Name = "Usługi nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "101",
                            Name = "Podgrupa usług dla ludności"
                        },
                        new
                        {
                            IscedCode = "1010",
                            Name = "Usługi dla ludności nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "1011",
                            Name = "Usługi domowe"
                        },
                        new
                        {
                            IscedCode = "1012",
                            Name = "Pielęgnacja włosów i urody"
                        },
                        new
                        {
                            IscedCode = "1013",
                            Name = "Hotele, restauracje i katering"
                        },
                        new
                        {
                            IscedCode = "1014",
                            Name = "Sport"
                        },
                        new
                        {
                            IscedCode = "1015",
                            Name = "Turystyka i wypoczynek"
                        },
                        new
                        {
                            IscedCode = "1019",
                            Name = "Programy i kwalifikacje związane z usługi dla ludności gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "102",
                            Name = "Podgrupa higieny i bezpieczeństwa pracy"
                        },
                        new
                        {
                            IscedCode = "1020",
                            Name = "Usługi higieny i bezpieczeństwa pracy nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "1021",
                            Name = "Higiena publiczna"
                        },
                        new
                        {
                            IscedCode = "1022",
                            Name = "Bezpieczeństwo i higiena pracy"
                        },
                        new
                        {
                            IscedCode = "1029",
                            Name = "Programy i kwalifikacje związane z usługami w zakresie higieny i bezpieczeństwa pracy"
                        },
                        new
                        {
                            IscedCode = "103",
                            Name = "Podgrupa ochrony i bezpieczeństwa"
                        },
                        new
                        {
                            IscedCode = "1030",
                            Name = "Ochrona i bezpieczeństwo nieokreślone dalej"
                        },
                        new
                        {
                            IscedCode = "1031",
                            Name = "Wojsko i obronność"
                        },
                        new
                        {
                            IscedCode = "1032",
                            Name = "Ochrona osób i mienia"
                        },
                        new
                        {
                            IscedCode = "1039",
                            Name = "Programy i kwalifikacje związane z ochroną i bezpieczeństwem gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "104",
                            Name = "Podgrupa usług transportowych"
                        },
                        new
                        {
                            IscedCode = "1041",
                            Name = "Transport"
                        },
                        new
                        {
                            IscedCode = "108",
                            Name = "Podgrupa interdyscyplinarnych programów i kwalifikacji obejmujących usługi"
                        },
                        new
                        {
                            IscedCode = "1088",
                            Name = "Interdyscyplinarne programy i kwalifikacje obejmujące usługi"
                        },
                        new
                        {
                            IscedCode = "109",
                            Name = "Podgrupa usług gdzie indziej niesklasyfikowanych"
                        },
                        new
                        {
                            IscedCode = "1099",
                            Name = "Usługi gdzie indziej niesklasyfikowane"
                        },
                        new
                        {
                            IscedCode = "99",
                            Name = "Grupa Obszar nieznany"
                        },
                        new
                        {
                            IscedCode = "999",
                            Name = "Podgrupa obszar nieznany"
                        },
                        new
                        {
                            IscedCode = "9999",
                            Name = "Obszar nieznany"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Language", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageCode")
                        .HasName("Language_pk");

                    b.ToTable("Language", (string)null);

                    b.HasData(
                        new
                        {
                            LanguageCode = "alb-sqi",
                            Name = "albański"
                        },
                        new
                        {
                            LanguageCode = "eng",
                            Name = "angielski"
                        },
                        new
                        {
                            LanguageCode = "ara",
                            Name = "arabski"
                        },
                        new
                        {
                            LanguageCode = "bel",
                            Name = "białoruski"
                        },
                        new
                        {
                            LanguageCode = "bul",
                            Name = "bułgarski"
                        },
                        new
                        {
                            LanguageCode = "cel",
                            Name = "celtyckie"
                        },
                        new
                        {
                            LanguageCode = "chi-zho",
                            Name = "chiński"
                        },
                        new
                        {
                            LanguageCode = "scr-hrv",
                            Name = "chorwacki"
                        },
                        new
                        {
                            LanguageCode = "cze-ces",
                            Name = "czeski"
                        },
                        new
                        {
                            LanguageCode = "dan",
                            Name = "duński"
                        },
                        new
                        {
                            LanguageCode = "fin",
                            Name = "fiński"
                        },
                        new
                        {
                            LanguageCode = "fre-fra",
                            Name = "francuski"
                        },
                        new
                        {
                            LanguageCode = "gem",
                            Name = "germańskie"
                        },
                        new
                        {
                            LanguageCode = "gre-ell",
                            Name = "grecki"
                        },
                        new
                        {
                            LanguageCode = "heb",
                            Name = "hebrajski"
                        },
                        new
                        {
                            LanguageCode = "hin",
                            Name = "hindi"
                        },
                        new
                        {
                            LanguageCode = "spa",
                            Name = "hiszpański"
                        },
                        new
                        {
                            LanguageCode = "dut-nld",
                            Name = "holenderski"
                        },
                        new
                        {
                            LanguageCode = "ind",
                            Name = "indonezyjski"
                        },
                        new
                        {
                            LanguageCode = "opi-ij",
                            Name = "inny język"
                        },
                        new
                        {
                            LanguageCode = "ice-isl",
                            Name = "islandzki"
                        },
                        new
                        {
                            LanguageCode = "jpn",
                            Name = "japoński"
                        },
                        new
                        {
                            LanguageCode = "yid",
                            Name = "jidysz"
                        },
                        new
                        {
                            LanguageCode = "cat",
                            Name = "kataloński"
                        },
                        new
                        {
                            LanguageCode = "kor",
                            Name = "koreański"
                        },
                        new
                        {
                            LanguageCode = "lit",
                            Name = "litewski"
                        },
                        new
                        {
                            LanguageCode = "lat",
                            Name = "łacina"
                        },
                        new
                        {
                            LanguageCode = "lav",
                            Name = "łotewski"
                        },
                        new
                        {
                            LanguageCode = "mac-mkd",
                            Name = "macedoński"
                        },
                        new
                        {
                            LanguageCode = "may-msa",
                            Name = "malajski"
                        },
                        new
                        {
                            LanguageCode = "nno",
                            Name = "neonorweski (nynorsk)"
                        },
                        new
                        {
                            LanguageCode = "ger-deu",
                            Name = "niemiecki"
                        },
                        new
                        {
                            LanguageCode = "nor",
                            Name = "norweski"
                        },
                        new
                        {
                            LanguageCode = "nob",
                            Name = "norweski tradycyjny (bokmal)"
                        },
                        new
                        {
                            LanguageCode = "per-fas",
                            Name = "perski (farsi)"
                        },
                        new
                        {
                            LanguageCode = "pol",
                            Name = "polski"
                        },
                        new
                        {
                            LanguageCode = "pso",
                            Name = "polski język migowy"
                        },
                        new
                        {
                            LanguageCode = "por",
                            Name = "portugalski"
                        },
                        new
                        {
                            LanguageCode = "rus",
                            Name = "rosyjski"
                        },
                        new
                        {
                            LanguageCode = "rum-ron",
                            Name = "rumuński"
                        },
                        new
                        {
                            LanguageCode = "scc-srp",
                            Name = "serbski"
                        },
                        new
                        {
                            LanguageCode = "slo-slk",
                            Name = "słowacki"
                        },
                        new
                        {
                            LanguageCode = "slv",
                            Name = "słoweński"
                        },
                        new
                        {
                            LanguageCode = "swe",
                            Name = "szwedzki"
                        },
                        new
                        {
                            LanguageCode = "tur",
                            Name = "turecki"
                        },
                        new
                        {
                            LanguageCode = "ukr",
                            Name = "ukraiński"
                        },
                        new
                        {
                            LanguageCode = "urd",
                            Name = "urdu"
                        },
                        new
                        {
                            LanguageCode = "hun",
                            Name = "węgierski"
                        },
                        new
                        {
                            LanguageCode = "vie",
                            Name = "wietnamski"
                        },
                        new
                        {
                            LanguageCode = "ita",
                            Name = "włoski"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.AIType", b =>
                {
                    b.Property<int>("AcademicInstitutionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSchool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AcademicInstitutionTypeId")
                        .HasName("AIType_pk");

                    b.ToTable("AIType", (string)null);

                    b.HasData(
                        new
                        {
                            AcademicInstitutionTypeId = 16,
                            IsSchool = false,
                            Name = "Federacja"
                        },
                        new
                        {
                            AcademicInstitutionTypeId = 5,
                            IsSchool = false,
                            Name = "Instytucja naukowa"
                        },
                        new
                        {
                            AcademicInstitutionTypeId = 1,
                            IsSchool = true,
                            Name = "Uczelnia kościelna"
                        },
                        new
                        {
                            AcademicInstitutionTypeId = 10,
                            IsSchool = true,
                            Name = "Uczelnia niepubliczna"
                        },
                        new
                        {
                            AcademicInstitutionTypeId = 13,
                            IsSchool = true,
                            Name = "Uczelnia publiczna"
                        });
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.AcademicInstitution", b =>
                {
                    b.Property<Guid>("AcademicInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcademicInstitutionTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(GETDATE())");

                    b.HasKey("AcademicInstitutionId")
                        .HasName("AcademicInstitution_pk");

                    b.HasIndex("AcademicInstitutionTypeId");

                    b.ToTable("AcademicInstitution", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.SpecificTypes.AISpecificType", b =>
                {
                    b.Property<int>("AcademicInstitutionSpecificTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AcademicInstitutionSpecificTypeId")
                        .HasName("AISpecificType_pk");

                    b.ToTable("AISpecificType", (string)null);
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.SpecificTypes.AISpecificTypeHistory", b =>
                {
                    b.Property<Guid>("AcademicInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcademicInstitutionSpecificTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("AcademicInstitutionId", "AcademicInstitutionSpecificTypeId", "Date")
                        .HasName("AISpecificTypeHistory_pk");

                    b.HasIndex("AcademicInstitutionSpecificTypeId");

                    b.ToTable("AISpecificTypeHistory", (string)null);
                });

            modelBuilder.Entity("CourseAIOrganizationalUnit", b =>
                {
                    b.Property<Guid>("AcademicInstitutionOrganizationalUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcademicInstitutionOrganizationalUnitId", "CourseCompanyId");

                    b.HasIndex("CourseCompanyId");

                    b.ToTable("CourseAIOrganizationalUnit");
                });

            modelBuilder.Entity("CourseLanguage", b =>
                {
                    b.Property<Guid>("CourseAcademicInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageAcademicInstitutionId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourseAcademicInstitutionId", "LanguageAcademicInstitutionId");

                    b.HasIndex("LanguageAcademicInstitutionId");

                    b.ToTable("CourseLanguage");
                });

            modelBuilder.Entity("DivisionStreet", b =>
                {
                    b.Property<int>("DivisionAcademicInstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("StreetAcademicInstitutionId")
                        .HasColumnType("int");

                    b.HasKey("DivisionAcademicInstitutionId", "StreetAcademicInstitutionId");

                    b.HasIndex("StreetAcademicInstitutionId");

                    b.ToTable("DivisionStreet");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Address", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", "Division")
                        .WithMany("Addresses")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Address_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Address_Street");

                    b.Navigation("Division");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("Divisions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.DivisionType", "DivisionType")
                        .WithMany("Divisions")
                        .HasForeignKey("DivisionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("DivisionType_Division");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", "ParentDivision")
                        .WithMany("ChildDivisions")
                        .HasForeignKey("ParentDivisionId")
                        .HasConstraintName("Division_Division");

                    b.Navigation("Country");

                    b.Navigation("DivisionType");

                    b.Navigation("ParentDivision");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("Streets")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_Street");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.DivisionType", "DivisionType")
                        .WithMany("Streets")
                        .HasForeignKey("DivisionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("DivisionType_Street");

                    b.Navigation("Country");

                    b.Navigation("DivisionType");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassification", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("CompanyClassificationTypes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_CompanyClassification");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassificationDetail", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassification", "CompanyClassification")
                        .WithMany("CompanyClassifications")
                        .HasForeignKey("CompanyClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyClassificationDetail_CompanyClassification");

                    b.HasOne("Application.DatabaseRelational.Models.Companies.Company", "Company")
                        .WithMany("CompanyClassifications")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyClassificationDetail_Company");

                    b.Navigation("Company");

                    b.Navigation("CompanyClassification");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.CompanyNameHistory", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Companies.Company", "Company")
                        .WithMany("CompanyNameHistories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyNameHistory_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifier", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Country", "Country")
                        .WithMany("CompanyIdentifierTypes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_CompanyIdentifier");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifierDetail", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Companies.Company", "Company")
                        .WithMany("CompanyIdentifiers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyIdentifierDetail_Company");

                    b.HasOne("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifier", "CompanyIdentifier")
                        .WithMany("CompanyIdentifiers")
                        .HasForeignKey("CompanyIdentifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyIdentifierDetail_CompanyIdentifier");

                    b.Navigation("Company");

                    b.Navigation("CompanyIdentifier");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Statuses.CompanyStatusHistory", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Companies.Company", "Company")
                        .WithMany("CompanyStatusHistories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyStatusHistory_Company");

                    b.HasOne("Application.DatabaseRelational.Models.Companies.Statuses.CompanyStatus", "CompanyStatus")
                        .WithMany("CompanyStatusHistories")
                        .HasForeignKey("CompanyStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CompanyStatusHistory_CompanyStatus");

                    b.Navigation("Company");

                    b.Navigation("CompanyStatus");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Course", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.CourseForm", "CourseForm")
                        .WithMany("Courses")
                        .HasForeignKey("CourseFormCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Course_CourseForm");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("CourseLevelCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Course_CourseLevel");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.CourseProfile", "CourseProfile")
                        .WithMany("Courses")
                        .HasForeignKey("CourseProfileCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Course_CourseProfile");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.CourseTitle", "CourseTitle")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTitleCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Course_CourseTitle");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Isced", "Isced")
                        .WithMany("Courses")
                        .HasForeignKey("IscedCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Course_Isced");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Language", "Language")
                        .WithMany("CourseLanguage")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Course_Language");

                    b.Navigation("CourseForm");

                    b.Navigation("CourseLevel");

                    b.Navigation("CourseProfile");

                    b.Navigation("CourseTitle");

                    b.Navigation("Isced");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Disciplines.CourseDiscipline", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Course", "Course")
                        .WithMany("CourseDisciplines")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CourseDiscipline_Course");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Disciplines.Discipline", "Discipline")
                        .WithMany("Courses")
                        .HasForeignKey("DisciplineCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("CourseDiscipline_Discipline");

                    b.Navigation("Course");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.AcademicInstitution", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Companies.Company", "Company")
                        .WithOne("AcademicInstitution")
                        .HasForeignKey("Application.DatabaseRelational.Models.HighSchools.Institutions.AcademicInstitution", "AcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Company_AcademicInstitution");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Institutions.AIType", "AcademicInstitutionType")
                        .WithMany("AcademicInstitutions")
                        .HasForeignKey("AcademicInstitutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AIType_AcademicInstitution");

                    b.Navigation("AcademicInstitutionType");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.SpecificTypes.AISpecificTypeHistory", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Institutions.AcademicInstitution", "AcademicInstitution")
                        .WithMany("SpecificTypeHistories")
                        .HasForeignKey("AcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AISpecificTypeHistory_AcademicInstitution");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Institutions.SpecificTypes.AISpecificType", "AcademicInstitutionSpecificType")
                        .WithMany("SpecificTypeHistories")
                        .HasForeignKey("AcademicInstitutionSpecificTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AISpecificTypeHistory_AISpecificType");

                    b.Navigation("AcademicInstitution");

                    b.Navigation("AcademicInstitutionSpecificType");
                });

            modelBuilder.Entity("CourseAIOrganizationalUnit", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.AIOrganizationalUnit", null)
                        .WithMany()
                        .HasForeignKey("AcademicInstitutionOrganizationalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CourseAIOrganizationalUnit_AIOrganizationalUnit");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CourseAIOrganizationalUnit_Course");
                });

            modelBuilder.Entity("CourseLanguage", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseAcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CourseLanguage_Course");

                    b.HasOne("Application.DatabaseRelational.Models.HighSchools.Courses.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageAcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CourseLanguage_Language");
                });

            modelBuilder.Entity("DivisionStreet", b =>
                {
                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Division", null)
                        .WithMany()
                        .HasForeignKey("DivisionAcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DivisionStreet_DivisionAcademicInstitutionId");

                    b.HasOne("Application.DatabaseRelational.Models.Addresses.Street", null)
                        .WithMany()
                        .HasForeignKey("StreetAcademicInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DivisionStreet_StreetAcademicInstitutionId");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Country", b =>
                {
                    b.Navigation("CompanyClassificationTypes");

                    b.Navigation("CompanyIdentifierTypes");

                    b.Navigation("Divisions");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Division", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ChildDivisions");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.DivisionType", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Addresses.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Classifications.CompanyClassification", b =>
                {
                    b.Navigation("CompanyClassifications");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Company", b =>
                {
                    b.Navigation("AcademicInstitution");

                    b.Navigation("CompanyClassifications");

                    b.Navigation("CompanyIdentifiers");

                    b.Navigation("CompanyNameHistories");

                    b.Navigation("CompanyStatusHistories");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Identifiers.CompanyIdentifier", b =>
                {
                    b.Navigation("CompanyIdentifiers");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.Companies.Statuses.CompanyStatus", b =>
                {
                    b.Navigation("CompanyStatusHistories");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Course", b =>
                {
                    b.Navigation("CourseDisciplines");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseForm", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseProfile", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.CourseTitle", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Disciplines.Discipline", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Isced", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Courses.Language", b =>
                {
                    b.Navigation("CourseLanguage");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.AIType", b =>
                {
                    b.Navigation("AcademicInstitutions");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.AcademicInstitution", b =>
                {
                    b.Navigation("SpecificTypeHistories");
                });

            modelBuilder.Entity("Application.DatabaseRelational.Models.HighSchools.Institutions.SpecificTypes.AISpecificType", b =>
                {
                    b.Navigation("SpecificTypeHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
